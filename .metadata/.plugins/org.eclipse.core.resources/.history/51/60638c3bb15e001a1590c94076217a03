package com.example.demo.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.impl.crypto.MacProvider;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;




@Service
public class JwtUtil {

//	private final Key secret = MacProvider.generateKey(SignatureAlgorithm.HS256);
	private static String secret = "riaAdvisory";
	
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }
    

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }
    

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }
    
    private Claims extractAllClaims(String token) {
        return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
    }

    
    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }
    

    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, username);
    }
    

    private String createToken(Map<String, Object> claims, String subject) {

        return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))
         
                .signWith(SignatureAlgorithm.HS256,secret).compact();
    }

    
    public Boolean validateToken(String token, UserDetails userDetails) {
    	try {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }catch(ExpiredJwtException | MalformedJwtException | SignatureException 
        | UnsupportedJwtException | IllegalArgumentException e) {
    System.out.println(e.getMessage());
    return false;
}
    }
}
